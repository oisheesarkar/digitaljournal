[
    {
        "title": "entry1",
        "content": "import json\nimport os\nfrom datetime import datetime\nimport tkinter as tk\nfrom tkinter import messagebox, scrolledtext, ttk\n\n# File to store the journal entries\nJOURNAL_FILE = 'journal_entries.json'\n\ndef load_entries():\n    \"\"\"Load journal entries from the JSON file and add 'date_modified' if not present.\"\"\"\n    if os.path.exists(JOURNAL_FILE):\n        with open(JOURNAL_FILE, 'r') as file:\n            entries = json.load(file)\n            # Ensure 'date_modified' is present in each entry\n            for entry in entries:\n                if 'date_modified' not in entry:\n                    entry['date_modified'] = entry['timestamp']\n            return entries\n    return []\n\ndef save_entries(entries):\n    \"\"\"Save journal entries to the JSON file.\"\"\"\n    with open(JOURNAL_FILE, 'w') as file:\n        json.dump(entries, file, indent=4)\n\nclass DigitalJournalApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Digital Journal\")\n        self.root.configure(bg=\"#f0f0f0\")\n\n        # Title Frame\n        title_frame = tk.Frame(self.root, bg=\"#f0f0f0\")\n        title_frame.pack(pady=10)\n        title_label = tk.Label(title_frame, text=\"My Digital Journal\", font=(\"Helvetica\", 24, \"bold\"), bg=\"#f0f0f0\")\n        title_label.pack()\n\n        # Search Frame\n        search_frame = tk.Frame(self.root, bg=\"#f0f0f0\")\n        search_frame.pack(pady=10)\n        self.search_entry = tk.Entry(search_frame, width=30, font=(\"Helvetica\", 14))\n        self.search_entry.pack(side=tk.LEFT, padx=10)\n\n        # Search and Reset buttons\n        tk.Button(search_frame, text=\"Search\", command=self.search_entries, bg=\"#2196F3\", fg=\"white\", font=(\"Helvetica\", 12)).pack(side=tk.LEFT, padx=(0, 10))\n        tk.Button(search_frame, text=\"Reset\", command=self.reset_search, bg=\"#FFC107\", font=(\"Helvetica\", 12)).pack(side=tk.LEFT)\n\n        # Frame for Add, Delete, and Edit buttons\n        button_frame = tk.Frame(self.root, bg=\"#f0f0f0\")\n        button_frame.pack(pady=10)\n\n        # Add, Edit, and Delete buttons\n        tk.Button(button_frame, text=\"Add Entry\", command=self.add_entry, bg=\"#4CAF50\", fg=\"white\", font=(\"Helvetica\", 12)).grid(row=0, column=0, padx=10)\n        tk.Button(button_frame, text=\"Edit Entry\", command=self.edit_entry, bg=\"#FF9800\", fg=\"white\", font=(\"Helvetica\", 12)).grid(row=0, column=1, padx=10)\n        tk.Button(button_frame, text=\"Delete Entry\", command=self.delete_entry, bg=\"#f44336\", fg=\"white\", font=(\"Helvetica\", 12)).grid(row=0, column=2, padx=10)\n\n        # Treeview for displaying journal entries with Date Modified\n        self.entry_tree = ttk.Treeview(self.root, columns=(\"Title\", \"Date Created\", \"Date Modified\"), show='headings', height=10)\n        self.entry_tree.heading(\"Title\", text=\"Title\", command=lambda: self.sort_entries(\"title\"))\n        self.entry_tree.heading(\"Date Created\", text=\"Date Created\", command=lambda: self.sort_entries(\"date_created\"))\n        self.entry_tree.heading(\"Date Modified\", text=\"Date Modified\", command=lambda: self.sort_entries(\"date_modified\"))\n        self.entry_tree.column(\"Title\", anchor=\"w\", width=200)\n        self.entry_tree.column(\"Date Created\", anchor=\"w\", width=120)\n        self.entry_tree.column(\"Date Modified\", anchor=\"w\", width=120)\n        self.entry_tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n        self.entry_tree.bind(\"<ButtonRelease-1>\", self.display_entry)\n\n        # Scrolled text area to show selected journal entry\n        self.entry_text = scrolledtext.ScrolledText(self.root, wrap=tk.WORD, width=50, height=10, state=tk.DISABLED, bg=\"#ffffff\", font=(\"Helvetica\", 12))\n        self.entry_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n        self.entry_text.pack_forget()  # Hide initially\n\n        # Store the full list of entries for displaying\n        self.entries = load_entries()\n        self.search_results = []\n        self.refresh_treeview()\n        self.sort_order = { \"title\": True, \"date_created\": True, \"date_modified\": True }  # Track sort order\n\n    def refresh_treeview(self):\n        \"\"\"Refresh the list of entries displayed in the treeview and manage placeholder text.\"\"\"\n        self.entry_tree.delete(*self.entry_tree.get_children())\n\n        if not self.entries:\n            self.entry_tree.insert(\"\", \"end\", values=(\"No journal entries available.\", \"\", \"\"))\n            self.entry_text.pack_forget()\n        else:\n            for entry in self.entries:\n                self.entry_tree.insert(\"\", \"end\", values=(entry['title'], entry['timestamp'], entry['date_modified']))\n\n    def add_entry(self):\n        \"\"\"Add a new journal entry via a custom dialog box.\"\"\"\n        dialog = tk.Toplevel(self.root)\n        dialog.title(\"Add New Entry\")\n        \n        tk.Label(dialog, text=\"Enter Title:\", font=(\"Helvetica\", 12)).grid(row=0, column=0, padx=10, pady=10)\n        title_entry = tk.Entry(dialog, width=40, font=(\"Helvetica\", 12))\n        title_entry.grid(row=0, column=1, padx=10, pady=10)\n        \n        tk.Label(dialog, text=\"Enter Content:\", font=(\"Helvetica\", 12)).grid(row=1, column=0, padx=10, pady=10)\n        content_text = scrolledtext.ScrolledText(dialog, wrap=tk.WORD, width=40, height=10, font=(\"Helvetica\", 12))\n        content_text.grid(row=1, column=1, padx=10, pady=10)\n        \n        def save_and_close():\n            title = title_entry.get().strip()\n            content = content_text.get(1.0, tk.END).strip()\n            if not title:\n                messagebox.showerror(\"Error\", \"Title cannot be empty.\")\n                return\n            entry = {\n                'title': title,\n                'content': content,\n                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),\n                'date_modified': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            }\n            self.entries.append(entry)\n            save_entries(self.entries)\n            messagebox.showinfo(\"Entry Added\", \"Your entry has been added successfully.\")\n            self.refresh_treeview()\n            dialog.destroy()\n\n        tk.Button(dialog, text=\"Save Entry\", command=save_and_close, bg=\"#4CAF50\", fg=\"white\", font=(\"Helvetica\", 12)).grid(row=2, column=1, padx=10, pady=10)\n        dialog.transient(self.root)\n        dialog.grab_set()\n        self.root.wait_window(dialog)\n\n    def edit_entry(self):\n        \"\"\"Edit the selected journal entry and update the date modified field.\"\"\"\n        selected_item = self.entry_tree.selection()\n        if not selected_item:\n            messagebox.showwarning(\"Select Entry\", \"Please select an entry to edit.\")\n            return\n\n        entry_index = self.entry_tree.index(selected_item)\n        entry = self.search_results[entry_index] if self.search_results else self.entries[entry_index]\n\n        dialog = tk.Toplevel(self.root)\n        dialog.title(\"Edit Entry\")\n\n        tk.Label(dialog, text=\"Edit Title:\", font=(\"Helvetica\", 12)).grid(row=0, column=0, padx=10, pady=10)\n        title_entry = tk.Entry(dialog, width=40, font=(\"Helvetica\", 12))\n        title_entry.insert(0, entry['title'])\n        title_entry.grid(row=0, column=1, padx=10, pady=10)\n\n        tk.Label(dialog, text=\"Edit Content:\", font=(\"Helvetica\", 12)).grid(row=1, column=0, padx=10, pady=10)\n        content_text = scrolledtext.ScrolledText(dialog, wrap=tk.WORD, width=40, height=10, font=(\"Helvetica\", 12))\n        content_text.insert(tk.END, entry['content'])\n        content_text.grid(row=1, column=1, padx=10, pady=10)\n\n        def save_changes():\n            new_title = title_entry.get().strip()\n            new_content = content_text.get(1.0, tk.END).strip()\n            if not new_title:\n                messagebox.showerror(\"Error\", \"Title cannot be empty.\")\n                return\n            entry['title'] = new_title\n            entry['content'] = new_content\n            entry['date_modified'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            save_entries(self.entries)\n            messagebox.showinfo(\"Entry Updated\", \"Your entry has been updated successfully.\")\n            self.refresh_treeview()\n            dialog.destroy()\n\n        tk.Button(dialog, text=\"Save Changes\", command=save_changes, bg=\"#FF9800\", fg=\"white\", font=(\"Helvetica\", 12)).grid(row=2, column=1, padx=10, pady=10)\n        dialog.transient(self.root)\n        dialog.grab_set()\n        self.root.wait_window(dialog)\n\n    def display_entry(self, event):\n        \"\"\"Display the content of the selected entry.\"\"\"\n        selected_item = self.entry_tree.selection()\n        if not selected_item:\n            self.entry_text.pack_forget()\n            return\n\n        entry_index = self.entry_tree.index(selected_item)\n        entry = self.search_results[entry_index] if self.search_results else self.entries[entry_index]\n        self.entry_text.config(state=tk.NORMAL)\n        self.entry_text.delete(1.0, tk.END)\n        self.entry_text.insert(tk.END, entry['content'])\n        self.entry_text.config(state=tk.DISABLED)\n        self.entry_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n\n    def delete_entry(self):\n        \"\"\"Delete the selected entry from the list.\"\"\"\n        selected_item = self.entry_tree.selection()\n        if not selected_item:\n            messagebox.showwarning(\"Select Entry\", \"Please select an entry to delete.\")\n            return\n\n        entry_index = self.entry_tree.index(selected_item)\n        entry = self.search_results[entry_index] if self.search_results else self.entries[entry_index]\n        \n        confirm = messagebox.askyesno(\"Delete Entry\", \"Are you sure you want to delete this entry?\")\n        if confirm:\n            self.entries.remove(entry)\n            save_entries(self.entries)\n            messagebox.showinfo(\"Entry Deleted\", \"The entry has been deleted successfully.\")\n            self.refresh_treeview()\n\n    def search_entries(self):\n        \"\"\"Search entries by title and update the treeview.\"\"\"\n        search_text = self.search_entry.get().strip().lower()\n        self.search_results = [entry for entry in self.entries if search_text in entry['title'].lower()]\n        self.refresh_treeview()\n\n    def reset_search(self):\n        \"\"\"Reset search and display all entries.\"\"\"\n        self.search_entry.delete(0, tk.END)\n        self.search_results = []\n        self.refresh_treeview()\n\n    def sort_entries(self, key):\n        \"\"\"Sort entries based on the selected key and refresh the treeview.\"\"\"\n        self.sort_order[key] = not self.sort_order[key]  # Toggle sort order\n        reverse = not self.sort_order[key]\n\n        if key == \"title\":\n            self.entries.sort(key=lambda entry: entry['title'].lower(), reverse=reverse)\n        elif key == \"date_created\":\n            self.entries.sort(key=lambda entry: entry['timestamp'], reverse=reverse)\n        elif key == \"date_modified\":\n            self.entries.sort(key=lambda entry: entry['date_modified'], reverse=reverse)\n\n        self.refresh_treeview()\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    app = DigitalJournalApp(root)\n    root.mainloop()",
        "timestamp": "2024-11-02 17:57:35",
        "date_modified": "2024-11-02 23:02:12"
    },
    {
        "title": "entry2",
        "content": "hello",
        "timestamp": "2024-11-02 17:57:59",
        "date_modified": "2024-11-02 17:57:59"
    },
    {
        "title": "entry3",
        "content": "this is a test\nthis is a test\nthis is a test\nthis is an edit test",
        "timestamp": "2024-11-02 18:03:51",
        "date_modified": "2024-11-02 22:54:13"
    },
    {
        "title": "entry4",
        "content": "its a whole new world",
        "timestamp": "2024-11-02 18:04:06",
        "date_modified": "2024-11-02 23:08:42"
    },
    {
        "title": "entry5",
        "content": "import json\nimport os\nfrom datetime import datetime\nimport tkinter as tk\nfrom tkinter import messagebox, scrolledtext\nfrom tkinter import ttk\n\n# File to store the journal entries\nJOURNAL_FILE = 'journal_entries.json'\n\ndef load_entries():\n    \"\"\"Load journal entries from the JSON file.\"\"\"\n    if os.path.exists(JOURNAL_FILE):\n        with open(JOURNAL_FILE, 'r') as file:\n            return json.load(file)\n    return []\n\ndef save_entries(entries):\n    \"\"\"Save journal entries to the JSON file.\"\"\"\n    with open(JOURNAL_FILE, 'w') as file:\n        json.dump(entries, file, indent=4)\n\nclass DigitalJournalApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Digital Journal\")\n        self.root.configure(bg=\"#f0f0f0\")\n\n        # Title Frame\n        title_frame = tk.Frame(self.root, bg=\"#f0f0f0\")\n        title_frame.pack(pady=10)\n        title_label = tk.Label(title_frame, text=\"My Digital Journal\", font=(\"Helvetica\", 24, \"bold\"), bg=\"#f0f0f0\")\n        title_label.pack()\n\n        # Search Frame\n        search_frame = tk.Frame(self.root, bg=\"#f0f0f0\")\n        search_frame.pack(pady=10)\n        self.search_entry = tk.Entry(search_frame, width=30, font=(\"Helvetica\", 14))\n        self.search_entry.pack(side=tk.LEFT, padx=10)\n\n        # Search and Reset buttons\n        tk.Button(search_frame, text=\"Search\", command=self.search_entries, bg=\"#2196F3\", fg=\"white\", font=(\"Helvetica\", 12)).pack(side=tk.LEFT, padx=(0, 10))\n        tk.Button(search_frame, text=\"Reset\", command=self.reset_search, bg=\"#FFC107\", font=(\"Helvetica\", 12)).pack(side=tk.LEFT)\n\n        # Frame for Add and Delete buttons\n        button_frame = tk.Frame(self.root, bg=\"#f0f0f0\")\n        button_frame.pack(pady=10)\n\n        # Add and Delete buttons\n        tk.Button(button_frame, text=\"Add Entry\", command=self.add_entry, bg=\"#4CAF50\", fg=\"white\", font=(\"Helvetica\", 12)).grid(row=0, column=0, padx=10)\n        tk.Button(button_frame, text=\"Delete Entry\", command=self.delete_entry, bg=\"#f44336\", fg=\"white\", font=(\"Helvetica\", 12)).grid(row=0, column=1, padx=10)\n\n        # Treeview for displaying journal entries\n        self.entry_tree = ttk.Treeview(self.root, columns=(\"Title\", \"Date\"), show='headings', height=10)\n        self.entry_tree.heading(\"Title\", text=\"Title\")\n        self.entry_tree.heading(\"Date\", text=\"Date\")\n        self.entry_tree.column(\"Title\", anchor=\"w\", width=300)  # Left align Title\n        self.entry_tree.column(\"Date\", anchor=\"w\", width=120)   # Left align Date\n        self.entry_tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n        self.entry_tree.bind(\"<ButtonRelease-1>\", self.display_entry)  # Change to single click\n\n        # Scrolled text area to show selected journal entry\n        self.entry_text = scrolledtext.ScrolledText(self.root, wrap=tk.WORD, width=50, height=10, state=tk.DISABLED, bg=\"#ffffff\", font=(\"Helvetica\", 12))\n        self.entry_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n        self.entry_text.pack_forget()  # Hide initially\n\n        # Store the full list of entries for displaying\n        self.entries = load_entries()\n        self.search_results = []  # To store search results\n        self.refresh_treeview()\n\n    def refresh_treeview(self):\n        \"\"\"Refresh the list of entries displayed in the treeview and manage placeholder text.\"\"\"\n        self.entry_tree.delete(*self.entry_tree.get_children())\n\n        if not self.entries:\n            # Show placeholder text\n            self.entry_tree.insert(\"\", \"end\", values=(\"No journal entries available.\", \"\"))\n            self.entry_text.pack_forget()  # Hide the text area if no entries available\n        else:\n            # Insert entry titles and dates\n            for entry in self.entries:\n                self.entry_tree.insert(\"\", \"end\", values=(entry['title'], entry['timestamp']))\n\n    def add_entry(self):\n        \"\"\"Add a new journal entry via a custom dialog box.\"\"\"\n        dialog = tk.Toplevel(self.root)\n        dialog.title(\"Add New Entry\")\n        \n        tk.Label(dialog, text=\"Enter Title:\", font=(\"Helvetica\", 12)).grid(row=0, column=0, padx=10, pady=10)\n        title_entry = tk.Entry(dialog, width=40, font=(\"Helvetica\", 12))\n        title_entry.grid(row=0, column=1, padx=10, pady=10)\n        \n        tk.Label(dialog, text=\"Enter Content:\", font=(\"Helvetica\", 12)).grid(row=1, column=0, padx=10, pady=10)\n        content_text = scrolledtext.ScrolledText(dialog, wrap=tk.WORD, width=40, height=10, font=(\"Helvetica\", 12))\n        content_text.grid(row=1, column=1, padx=10, pady=10)\n        \n        def save_and_close():\n            title = title_entry.get().strip()\n            content = content_text.get(1.0, tk.END).strip()\n            if not title:\n                messagebox.showerror(\"Error\", \"Title cannot be empty.\")\n                return\n            entry = {\n                'title': title,\n                'content': content,\n                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            }\n            self.entries.append(entry)  # Append to the local entries\n            save_entries(self.entries)\n            messagebox.showinfo(\"Entry Added\", \"Your entry has been added successfully.\")\n            self.refresh_treeview()\n            dialog.destroy()\n\n        tk.Button(dialog, text=\"Save Entry\", command=save_and_close, bg=\"#4CAF50\", fg=\"white\", font=(\"Helvetica\", 12)).grid(row=2, column=1, padx=10, pady=10)\n        dialog.transient(self.root)\n        dialog.grab_set()\n        self.root.wait_window(dialog)\n\n    def display_entry(self, event):\n        \"\"\"Display the content of the selected entry or hide the entry box if nothing is selected.\"\"\"\n        selected_item = self.entry_tree.selection()\n        if not selected_item:\n            self.entry_text.pack_forget()  # Hide if nothing is selected\n            return\n\n        # Show the entry text box and display selected entry's details\n        self.entry_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n\n        # Check if the search has been performed\n        if self.search_results:\n            entry_index = self.entry_tree.index(selected_item)\n            selected_entry = self.search_results[entry_index]  # Access from the search results\n        else:\n            entry_index = self.entry_tree.index(selected_item)\n            selected_entry = self.entries[entry_index]  # Access from the original entries\n\n        # Display the selected entry's details\n        self.entry_text.config(state=tk.NORMAL)\n        self.entry_text.delete(1.0, tk.END)\n        self.entry_text.insert(tk.END, f\"Title: {selected_entry['title']}\\n\")\n        self.entry_text.insert(tk.END, f\"Date: {selected_entry['timestamp']}\\n\\n\")\n        self.entry_text.insert(tk.END, selected_entry['content'])\n        self.entry_text.config(state=tk.DISABLED)\n\n    def delete_entry(self):\n        \"\"\"Delete an entry by selecting it from the treeview.\"\"\"\n        selected_item = self.entry_tree.selection()\n        if not selected_item or self.entry_tree.item(selected_item)['values'] == (\"No journal entries available.\", \"\"):\n            messagebox.showwarning(\"Select Entry\", \"Please select a valid entry to delete.\")\n            return\n        \n        if self.search_results:\n            entry_index = self.entry_tree.index(selected_item)\n            deleted_entry = self.search_results.pop(entry_index)  # Remove from search results\n        else:\n            entry_index = self.entry_tree.index(selected_item)\n            deleted_entry = self.entries.pop(entry_index)  # Remove from original entries\n        \n        save_entries(self.entries)\n\n        messagebox.showinfo(\"Entry Deleted\", f\"Deleted entry: {deleted_entry['title']}\")\n        self.refresh_treeview()\n\n        # Clear and hide the entry text box if no entries remain\n        if not self.entries:\n            self.entry_text.pack_forget()\n        else:\n            self.entry_text.config(state=tk.NORMAL)\n            self.entry_text.delete(1.0, tk.END)\n            self.entry_text.config(state=tk.DISABLED)\n\n    def search_entries(self):\n        \"\"\"Search for entries based on the title.\"\"\"\n        search_query = self.search_entry.get().lower()\n        self.entry_tree.delete(*self.entry_tree.get_children())\n        self.search_results = [entry for entry in self.entries if search_query in entry['title'].lower()]\n        \n        if self.search_results:\n            for entry in self.search_results:\n                self.entry_tree.insert(\"\", \"end\", values=(entry['title'], entry['timestamp']))\n        else:\n            self.entry_tree.insert(\"\", \"end\", values=(\"No matching entries found.\", \"\"))\n\n        # Clear the entry text box when searching\n        self.entry_text.pack_forget()\n\n    def reset_search(self):\n        \"\"\"Reset the search field and display all entries.\"\"\"\n        self.search_entry.delete(0, tk.END)  # Clear search entry\n        self.search_results.clear()  # Clear search results\n        self.entries = load_entries()  # Reload original entries\n        self.refresh_treeview()  # Show all entries\n\ndef main():\n    root = tk.Tk()\n    app = DigitalJournalApp(root)\n    root.geometry(\"600x600\")  # Increased height for better display\n    root.resizable(True, True)  # Allow the window to be resizable\n    root.mainloop()\n\nif __name__ == \"__main__\":\n    main()",
        "timestamp": "2024-11-02 18:19:10",
        "date_modified": "2024-11-02 18:19:10"
    },
    {
        "title": "02-11 Meeting product",
        "content": "Loving you is a losing game",
        "timestamp": "2024-11-02 22:30:30",
        "date_modified": "2024-11-02 22:30:30"
    },
    {
        "title": "entry6",
        "content": "search doesnt work now damn it",
        "timestamp": "2024-11-02 23:05:41",
        "date_modified": "2024-11-02 23:05:41"
    }
]